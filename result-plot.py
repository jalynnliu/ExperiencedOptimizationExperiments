import numpy as np
import matplotlib.pyplot as plt

path = '/data/ExpAdaptation'


def meanScatter():
    a = []
    problem_name = 'sphere'
    for j in range(5):
        f = open(
            path + '/Results/SyntheticProbs/' + problem_name + '/dimension10/opt-log-' + problem_name + '-dim10-bias0.5' + str(
                j) + '.txt')
        for i in range(2000):
            line = f.readline()
            while line.split(' ')[0] != 'source':
                line = f.readline()
            line = line.split(': ')[1]
            biases = line.split(' ')
            dist = 0
            for bias in biases:
                dist += abs(float(bias) - 0.1)
            line = f.readline()
            while line.split(': ')[0] != 'optimization result':
                line = f.readline()
            a.append((float(line.split(': ')[1].split('#')[0]), dist))

    a.sort(key=lambda a: a[1])
    errors = [x[0] for x in a]
    dists = [x[1] for x in a]

    s = 0
    t = 0
    stride = 0.1
    y = []
    x = [stride]
    while t < len(a):
        while dists[t] <= x[-1]:
            t += 1
            if t == len(a): break
        if s != t:
            y.append(np.mean(errors[s:t]))
            s = t
            x.append(x[-1] + stride)
        else:
            x[-1] += stride

    del x[-1]
    plt.scatter(x, y)
    plt.xlabel('Distance')
    plt.ylabel('opt-error')
    plt.show()
    # plt.save


def twoColor():
    f = open(path + '/Results/SyntheticProbs/ExperimentTwo/opt-log-sphere-dim10-bias0.5remix.txt')
    c = ['red', 'blue']
    for j in range(2):
        a = []
        for i in range(1000):
            line = f.readline()
            while line.split(' ')[0] != 'source':
                line = f.readline()
            line = line.split(': ')[1]
            biases = line.split(' ')
            dist = 0
            for bias in biases:
                dist += abs(float(bias) - 0.1)
            line = f.readline()
            while line.split(': ')[0] != 'optimization result':
                line = f.readline()
            a.append((float(line.split(': ')[1].split('#')[0]), dist))

        x = [x[0] for x in a]
        y = [x[1] for x in a]

        plt.scatter(x, y, c=c[j])
    plt.show()


def budgetPlot():
    y1 = np.loadtxt(path + '/Results/budget-result-ave.txt')
    y2 = np.loadtxt(path + '/Results/budget-result-ada.txt')
    y1 = [2.38806206, 2.10589926, 1.85721618, 1.74515734, 1.52217015, 1.31378115,
          1.27845177, 1.0891672, 0.90988687, 0.89668451, 0.79542216, 0.72106048,
          0.65716469, 0.59738635, 0.54361587, 0.51559987, 0.50840229, 0.48450549,
          0.48224281, 0.45109003, 0.43301192, 0.42367719, 0.40303395, 0.40150137,
          0.37195861, 0.35332793, 0.34713374, 0.34561094, 0.33205132, 0.33205132,
          0.32449324, 0.31538573, 0.29554891, 0.29183061, 0.29183061, 0.29183061,
          0.28459424, 0.28459424, 0.28323818, 0.28024813, 0.27765627, 0.27669559,
          0.25428805, 0.25428805, 0.25428805, 0.25270072, 0.23475773, 0.23113071,
          0.23113071, 0.222397, 0.222397, 0.222397, 0.22089978, 0.22089978,
          0.20801553, 0.20057341, 0.19264677, 0.19138141, 0.19138141, 0.18626743,
          0.18626743, 0.18016832, 0.18016832, 0.16993193, 0.16779942, 0.16757835,
          0.16757835, 0.1599661, 0.1599661, 0.15925171, 0.15925171, 0.15925171,
          0.15669823, 0.15243653, 0.15232727, 0.14780019, 0.14647773, 0.14647773,
          0.14533387, 0.14496655, 0.14396571, 0.14396571, 0.1408811, 0.14029111,
          0.13769527, 0.13769527, 0.13658683, 0.13658683, 0.13425389, 0.13425389,
          0.13425389, 0.12797972, 0.1279159, 0.1279159, 0.12788157, 0.12788157,
          0.12788157, 0.12788157, 0.12788157, 0.12788157, 0.12672094, 0.12672094,
          0.12672094, 0.12628227, 0.12521157, 0.12340043, 0.12340043, 0.12340043,
          0.12057671, 0.12056509, 0.12056509, 0.106081, 0.10468208, 0.10468208,
          0.09527044, 0.09527044, 0.09527044, 0.09527044, 0.09387189, 0.09387189,
          0.09387189, 0.09387189, 0.09387189, 0.09217384, 0.09207728, 0.09207728,
          0.09203031, 0.09200881, 0.09200881, 0.09175686, 0.09174639, 0.09071906,
          0.09070126, 0.08987432, 0.08348475, 0.0824572, 0.0824572, 0.0824572,
          0.0824572, 0.08217638, 0.08217638, 0.08217638, 0.08217638, 0.08217638,
          0.08217638, 0.08217638, 0.08217638, 0.08217638, 0.08217638, 0.08217608,
          0.08217608, 0.08217608, 0.08208936, 0.08191699, 0.08190107, 0.08093105,
          0.08086096, 0.08064055, 0.07854355, 0.07854355, 0.07854355, 0.07854355,
          0.07854355, 0.07854355, 0.07854355, 0.07854355, 0.07854355, 0.07854355,
          0.07543558, 0.07543558, 0.07543558, 0.07515368, 0.07515368, 0.07390835,
          0.07390835, 0.07311524, 0.07311433, 0.07311433, 0.07194749, 0.0718325,
          0.07180369, 0.06932649, 0.06932649, 0.06862846, 0.06862846, 0.06862846,
          0.06862846, 0.06862846]

    y2 = [1.78905709, 1.50943223, 1.40757827, 1.31796076, 1.16872164, 1.03360487
        , 0.92983266, 0.9205703, 0.87413862, 0.86190991, 0.83242787, 0.7917148
        , 0.74465459, 0.66740985, 0.65404577, 0.65163608, 0.61341425, 0.60096514
        , 0.58301032, 0.55323506, 0.5200574, 0.50511543, 0.47420477, 0.46158965
        , 0.46158965, 0.43526978, 0.43413345, 0.42515442, 0.42419, 0.42251696
        , 0.4024623, 0.37266821, 0.37266821, 0.352054, 0.352054, 0.34247534
        , 0.32681866, 0.32413959, 0.32413959, 0.32239784, 0.32239784, 0.30568057
        , 0.30308476, 0.3009003, 0.28739945, 0.28640714, 0.28640714, 0.27668555
        , 0.27668555, 0.27371692, 0.27371692, 0.27294163, 0.2717755, 0.27094572
        , 0.26922045, 0.2691835, 0.2691835, 0.26165965, 0.26133837, 0.25936679
        , 0.24768254, 0.24768254, 0.24768254, 0.24275918, 0.24275918, 0.23689069
        , 0.2198539, 0.21504268, 0.21451738, 0.2137595, 0.19681957, 0.19351503
        , 0.17706961, 0.17404763, 0.17181662, 0.17181662, 0.16972081, 0.16763497
        , 0.16195156, 0.1603865, 0.1603865, 0.1603865, 0.14883135, 0.14883135
        , 0.14883135, 0.13452875, 0.1332775, 0.12846774, 0.12262934, 0.12262934
        , 0.1202001, 0.11169596, 0.11040994, 0.11040994, 0.11040994, 0.11040994
        , 0.10821586, 0.10338016, 0.10338016, 0.1012949, 0.1012949, 0.09867217
        , 0.09862705, 0.09077987, 0.09077987, 0.0907742, 0.0907742, 0.0907742
        , 0.08776781, 0.087726, 0.087726, 0.08286752, 0.08240031, 0.08240031
        , 0.07932883, 0.07911781, 0.07855881, 0.07850536, 0.0763984, 0.0763984
        , 0.07598632, 0.07598632, 0.07598632, 0.0753453, 0.072259, 0.06779109
        , 0.06762316, 0.06613176, 0.06573373, 0.06573373, 0.06007315, 0.06007068
        , 0.06007068, 0.06007068, 0.05867011, 0.05867011, 0.05848345, 0.05848345
        , 0.05848345, 0.05848345, 0.05848345, 0.05828546, 0.05828546, 0.05816655
        , 0.05816655, 0.05718987, 0.05713482, 0.05713482, 0.05708904, 0.05708904
        , 0.0562009, 0.0562009, 0.0561817, 0.0561817, 0.0561817, 0.0561817
        , 0.0561817, 0.0561817, 0.0561817, 0.05528386, 0.05528386, 0.05459502
        , 0.05459502, 0.05369789, 0.05328394, 0.05328394, 0.05328394, 0.05309552
        , 0.05269975, 0.05269975, 0.05081682, 0.05081682, 0.05081682, 0.04985493
        , 0.04985493, 0.04924868, 0.04924868, 0.04924868, 0.04924868, 0.04924868
        , 0.04924868, 0.04924868, 0.04924868, 0.04924868, 0.04882943, 0.04882943
        , 0.04877414, 0.04848612]
    x = [i + 12 for i in range(len(y1))]
    print(y1[50 - 12])
    print(y2[50 - 12])
    plt.ylim(ymax=2)
    plt.plot(x, y1)
    plt.plot(x, y2)
    plt.plot(x, [0.0637863 for _ in range(len(y2))])
    plt.show()


def weightHist():
    y = [[0.04969571, 0.05007882, 0.04991642, 0.05009571, 0.04982901, 0.04993482, 0.05009101, 0.05011494, 0.04992049,
          0.05003696, 0.05002343, 0.0500981, 0.05013482, 0.05007551, 0.04992103, 0.05001575, 0.05003222, 0.05000752,
          0.04991076, 0.05006698],
         [0.05825982, 0.04696831, 0.06122741, 0.03937022, 0.0703186, 0.05101838, 0.04443071, 0.03939929, 0.05355597,
          0.04908181, 0.05014223, 0.05074965, 0.04202625, 0.04615997, 0.0603188, 0.04433068, 0.04206191, 0.05149648,
          0.04752066, 0.05156284],
         [0.19104227, 0.03663947, 0.10138318, 0.02703618, 0.10077666, 0.07175996, 0.0306178, 0.02246882, 0.04207755,
          0.06501078, 0.0187211, 0.03304968, 0.03528457, 0.03750712, 0.03204653, 0.03241328, 0.02077071, 0.05332149,
          0.01877442, 0.02929843],
         [0.36981059, 0.02325812, 0.13387984, 0.01820332, 0.11281735, 0.05098451, 0.02739834, 0.01583785, 0.02769902,
          0.06020666, 0.00709419, 0.01480104, 0.01538812, 0.02144838, 0.01117949, 0.02688478, 0.0080889, 0.03073348,
          0.00605965, 0.01822634],
         [0.30305027, 0.02291531, 0.15247269, 0.01990618, 0.12997842, 0.05551652, 0.03316276, 0.01638479, 0.03357031,
          0.05953634, 0.00690971, 0.01613149, 0.01516457, 0.02211535, 0.01130184, 0.03092181, 0.00663883, 0.03833561,
          0.00574246, 0.02024474]]
    x = [i for i in range(len(y[0]))]
    for i in range(5):
        y1 = [y for j, y in enumerate(y[i]) if j % 2 == 0]
        y2 = [y for j, y in enumerate(y[i]) if j % 2 != 0]
        x1 = [j for j, y in enumerate(y[i]) if j % 2 == 0]
        x2 = [j for j, y in enumerate(y[i]) if j % 2 != 0]
        plt.bar(x1, y1)
        plt.bar(x2, y2)
        plt.xticks([])
        plt.ylabel('Weight')
        plt.xlabel('Distance')
        plt.legend(['sphere', 'rosenbrock'])
        plt.show()

# meanScatter()
# budgetPlot()
# weightHist()
